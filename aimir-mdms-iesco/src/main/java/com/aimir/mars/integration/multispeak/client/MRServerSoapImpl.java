
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.aimir.mars.integration.multispeak.client;

import org.multispeak.version_4.*;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import java.util.logging.Logger;

/**
 * This class was generated by Apache CXF 2.7.16
 * 2015-07-23T09:51:00.913+09:00
 * Generated source version: 2.7.16
 * 
 */

@javax.jws.WebService(
                      serviceName = "$service.ServiceName",
                      targetNamespace = "$service.Namespace",
                      wsdlLocation = "http://localhost:8089/services/MR_Server.wsdl",
                      endpointInterface = "MRServerSoap")
                      
public class MRServerSoapImpl implements MRServerSoap {

    private static final Logger LOG = Logger.getLogger(MRServerSoapImpl.class.getName());

    /* (non-Javadoc)
     * @see MRServerSoap#initiateMeterReadingsByMeterID(ArrayOfMeterIDNillable  meterIDs ,)java.lang.String  responseURL ,)java.lang.String  transactionID ,)ExpirationTime  expTime ,)MultiSpeakMsgHeader  multiSpeakMsgHeader )*
     */
    public ArrayOfErrorObject InitiateMeterReadingsByMeterID(ArrayOfMeterIDNillable meterIDs,java.lang.String responseURL,java.lang.String transactionID,ExpirationTime expTime) { 
        LOG.info("Executing operation initiateMeterReadingsByMeterID");
        System.out.println(meterIDs);
        System.out.println(responseURL);
        System.out.println(transactionID);
        System.out.println(expTime);
        try {
            ArrayOfErrorObject _return = new ArrayOfErrorObject();
            java.util.List<ErrorObject> _returnErrorObject = new java.util.ArrayList<ErrorObject>();
            ErrorObject _returnErrorObjectVal1 = new ErrorObject();
            _returnErrorObjectVal1.setObjectID("ObjectID-1283192358");
            _returnErrorObjectVal1.setErrorString("ErrorString1566816206");
            _returnErrorObjectVal1.setNounType("NounType181436402");
            _returnErrorObjectVal1.setEventTime(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2015-07-23T09:51:00.960+09:00"));
            _returnErrorObject.add(_returnErrorObjectVal1);
            _return.getErrorObject().addAll(_returnErrorObject);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see MRServerSoap#meterAddNotification(Meters  addedMeters ,)MultiSpeakMsgHeader  multiSpeakMsgHeader )*
     */
    public ArrayOfErrorObject MeterAddNotification(Meters addedMeters) { 
        LOG.info("Executing operation meterAddNotification");
        System.out.println(addedMeters);
        try {
            ArrayOfErrorObject _return = new ArrayOfErrorObject();
            java.util.List<ErrorObject> _returnErrorObject = new java.util.ArrayList<ErrorObject>();
            ErrorObject _returnErrorObjectVal1 = new ErrorObject();
            _returnErrorObjectVal1.setObjectID("ObjectID-1297086671");
            _returnErrorObjectVal1.setErrorString("ErrorString-1099281187");
            _returnErrorObjectVal1.setNounType("NounType1771611000");
            _returnErrorObjectVal1.setEventTime(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2015-07-23T09:51:00.977+09:00"));
            _returnErrorObject.add(_returnErrorObjectVal1);
            _return.getErrorObject().addAll(_returnErrorObject);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see MRServerSoap#meterRemoveNotification(Meters  removedMeters ,)MultiSpeakMsgHeader  multiSpeakMsgHeader )*
     */
    public ArrayOfErrorObject MeterRemoveNotification(Meters removedMeters) { 
        LOG.info("Executing operation meterRemoveNotification");
        System.out.println(removedMeters);
        try {
            ArrayOfErrorObject _return = new ArrayOfErrorObject();
            java.util.List<ErrorObject> _returnErrorObject = new java.util.ArrayList<ErrorObject>();
            ErrorObject _returnErrorObjectVal1 = new ErrorObject();
            _returnErrorObjectVal1.setObjectID("ObjectID-1930040690");
            _returnErrorObjectVal1.setErrorString("ErrorString617852244");
            _returnErrorObjectVal1.setNounType("NounType1057364707");
            _returnErrorObjectVal1.setEventTime(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2015-07-23T09:51:01.023+09:00"));
            _returnErrorObject.add(_returnErrorObjectVal1);
            _return.getErrorObject().addAll(_returnErrorObject);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

	@Override
	@WebResult(name = "MeterChangedNotificationResult", targetNamespace = "http://www.multispeak.org/Version_4.1_Release")
	@RequestWrapper(localName = "MeterChangedNotification", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", className = "org.multispeak.version_4.MeterChangedNotification")
	@WebMethod(operationName = "MeterChangedNotification", action = "http://www.multispeak.org/Version_4.1_Release/MeterChangedNotification")
	@ResponseWrapper(localName = "MeterChangedNotificationResponse", targetNamespace = "http://www.multispeak.org/Version_4.1_Release", className = "org.multispeak.version_4.MeterChangedNotificationResponse")
	public ArrayOfErrorObject MeterChangedNotification(
			@WebParam(name = "changedMeters", targetNamespace = "http://www.multispeak.org/Version_4.1_Release") Meters changedMeters) {
        LOG.info("Executing operation meterChangedNotification");
        System.out.println(changedMeters);
        try {
            ArrayOfErrorObject _return = new ArrayOfErrorObject();
            java.util.List<ErrorObject> _returnErrorObject = new java.util.ArrayList<ErrorObject>();
            ErrorObject _returnErrorObjectVal1 = new ErrorObject();
            _returnErrorObjectVal1.setObjectID("ObjectID-1930040690");
            _returnErrorObjectVal1.setErrorString("ErrorString617852244");
            _returnErrorObjectVal1.setNounType("NounType1057364707");
            _returnErrorObjectVal1.setEventTime(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2015-07-23T09:51:01.023+09:00"));
            _returnErrorObject.add(_returnErrorObjectVal1);
            _return.getErrorObject().addAll(_returnErrorObject);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
	}


    /* (non-Javadoc)
     * @see CBServerSoap#readingChangedNotification(ArrayOfMeterReading1  changedMeterReads ,)java.lang.String  transactionID ,)MultiSpeakMsgHeader  multiSpeakMsgHeader )*
     */
    public ArrayOfErrorObject ReadingChangedNotification(ArrayOfMeterReading1 changedMeterReads, java.lang.String transactionID) {
        LOG.info("Executing operation readingChangedNotification");
        System.out.println(changedMeterReads);
        System.out.println(transactionID);
        try {
            ArrayOfErrorObject _return = new ArrayOfErrorObject();
            java.util.List<ErrorObject> _returnErrorObject = new java.util.ArrayList<ErrorObject>();
            ErrorObject _returnErrorObjectVal1 = new ErrorObject();
            _returnErrorObjectVal1.setObjectID("ObjectID1942239771");
            _returnErrorObjectVal1.setErrorString("ErrorString615152209");
            _returnErrorObjectVal1.setNounType("NounType-213913525");
            _returnErrorObjectVal1.setEventTime(javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar("2015-07-22T20:55:13.020+09:00"));
            _returnErrorObject.add(_returnErrorObjectVal1);
            _return.getErrorObject().addAll(_returnErrorObject);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

}
