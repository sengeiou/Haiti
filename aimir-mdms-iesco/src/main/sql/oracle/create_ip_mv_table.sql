-- Check duplicate. 
DECLARE
  STMT_DDL VARCHAR2(2000);
BEGIN
  FOR TABLENAME IN (select 'EM' as name from dual union select 'GM' as name from dual union select 'WM' from dual union select 'HM' from dual)
  LOOP
    STMT_DDL := 'CREATE TABLE IP_MV_TEMP_'||TABLENAME.name||' '||
                '( '||
                '  YYYYMMDDHHMMSS  VARCHAR2(14) NOT NULL, '||
                '  CHANNEL         NUMBER(10)   NOT NULL, '||
                '  MDEV_ID         VARCHAR2(20) NOT NULL, '||
                '  MDEV_TYPE       VARCHAR2(20) NOT NULL, '||
                '  MV_VALUE        NUMBER(19,4) '||
                ') '||
                'PARTITION BY RANGE (YYYYMMDDHHMMSS) '||
                '( '||
                '  PARTITION PART'||to_char(CURRENT_DATE,'YYYYMMDD')||' VALUES LESS THAN ('''||to_char(CURRENT_DATE,'YYYYMMDD')||'235959'') '||
                ') TABLESPACE AIMIRPART ';
    EXECUTE IMMEDIATE STMT_DDL;
    STMT_DDL := 'CREATE UNIQUE INDEX IP_MV_TEMP_'||TABLENAME.name||'_PK ON IP_MV_TEMP_'||TABLENAME.name||' (MDEV_ID, CHANNEL, YYYYMMDDHHMMSS, MDEV_TYPE) LOCAL TABLESPACE AIMIRPART';
    EXECUTE IMMEDIATE STMT_DDL;
    STMT_DDL := 'ALTER TABLE IP_MV_TEMP_'||TABLENAME.name||' ADD CONSTRAINT IP_MV_TEMP_'||TABLENAME.name||'_PK PRIMARY KEY(MDEV_ID, CHANNEL, YYYYMMDDHHMMSS, MDEV_TYPE) USING INDEX';
    EXECUTE IMMEDIATE STMT_DDL;
  END LOOP;
END;
/

-- Process a captured date.
DECLARE
  STMT_DDL VARCHAR2(2000);
BEGIN
  FOR TABLENAME IN (select 'EM' as name from dual union select 'GM' as name from dual union select 'WM' from dual union select 'HM' from dual)
  LOOP
    STMT_DDL := 'CREATE TABLE IP_MV_VALID_'||TABLENAME.name||' '||
                '( '||
                '  TABLENUMBER      NUMBER, '||
                '  YYYYMMDDHHMMSS   VARCHAR2(14) NOT NULL, '||
                '  CHANNEL          NUMBER       NOT NULL, '||
                '  MDEV_ID          VARCHAR2(20) NOT NULL, '||
                '  MDEV_TYPE        VARCHAR2(20) NOT NULL, '||
                '  LOCATION_ID      NUMBER(10), '||
                '  MV_VALUE         NUMBER(19,4), '||
                '  MV_STATUS        NUMBER       DEFAULT 0, '||
                '  CAP_DEVICE_TYPE  VARCHAR2(20), '||
                '  CAP_DEVICE_ID    VARCHAR2(255), '||
                '  CAP_DATE_METER   NUMBER(19,4), '||
                '  CAP_DATE_DCU     NUMBER(19,4), '||
                '  LPCREATEDTIME    TIMESTAMP WITH TIME ZONE, '||
                '  CONSTRAINT IP_MV_VALID_'||TABLENAME.name||'_PK PRIMARY KEY (TABLENUMBER, MDEV_ID, CHANNEL, YYYYMMDDHHMMSS, MDEV_TYPE) '||
                ') '||
                'PARTITION BY LIST(TABLENUMBER) '||
                '( '||
                '  PARTITION MDEVID0 VALUES (''0''), '||
                '  PARTITION MDEVID1 VALUES (''1''), '||
                '  PARTITION MDEVID2 VALUES (''2''), '||
                '  PARTITION MDEVID3 VALUES (''3''), '||
                '  PARTITION MDEVID4 VALUES (''4''), '||
                '  PARTITION MDEVID5 VALUES (''5''), '||
                '  PARTITION MDEVID6 VALUES (''6''), '||
                '  PARTITION MDEVID7 VALUES (''7''), '||
                '  PARTITION MDEVID8 VALUES (''8''), '||
                '  PARTITION MDEVID9 VALUES (''9'') '||
                ') TABLESPACE AIMIRPART';
    EXECUTE IMMEDIATE STMT_DDL;
  END LOOP;
END;
/

-- Validate meter value.
DECLARE
  STMT_DDL VARCHAR2(2000);
BEGIN
  FOR TABLENAME IN (select 'EM' as name from dual union select 'GM' as name from dual union select 'WM' from dual union select 'HM' from dual)
  LOOP
    FOR TABLENUMBER IN 0..9
    LOOP
      STMT_DDL := 'CREATE TABLE IP_MV_VALID_'||TABLENAME.name||'_'||TABLENUMBER||' '||
                  '( '||
                  '  ROWIDFORDELETE   ROWID, '||
                  '  YYYYMMDDHHMMSS   VARCHAR2(14) NOT NULL, '||
                  '  CHANNEL          NUMBER       NOT NULL, '||
                  '  MDEV_ID          VARCHAR2(20) NOT NULL, '||
                  '  MDEV_TYPE        VARCHAR2(20) NOT NULL, '||
                  '  LOCATION_ID      NUMBER(10), '||
                  '  MV_VALUE         NUMBER(19,4), '||
                  '  MV_STATUS        NUMBER       DEFAULT 0, '||
                  '  MV_VALID         NUMBER       DEFAULT 0, '||
                  '  CAP_DEVICE_TYPE  VARCHAR2(20), '||
                  '  CAP_DEVICE_ID    VARCHAR2(255), '||
                  '  CAP_DATE_METER   NUMBER(19,4), '||
                  '  CAP_DATE_DCU     NUMBER(19,4), '||
                  '  LPCREATEDTIME    TIMESTAMP WITH TIME ZONE, '||
                  '  CONSTRAINT IP_MV_VALID_'||TABLENAME.name||'_'||TABLENUMBER||'_PK PRIMARY KEY (MDEV_ID, CHANNEL, YYYYMMDDHHMMSS, MDEV_TYPE) '||
                  ') TABLESPACE AIMIRINT ';
      EXECUTE IMMEDIATE STMT_DDL;
    END LOOP;
  END LOOP;
END;
/

-- Full data
DECLARE
  STMT_DDL VARCHAR2(2000);
BEGIN
  FOR TABLENAME IN (select 'EM' as name from dual union select 'GM' as name from dual union select 'WM' from dual union select 'HM' from dual)
  LOOP
    STMT_DDL := 'CREATE TABLE IP_MV_DATA_'||TABLENAME.name||' '||
                '( '||
                '  YYYYMMDDHHMMSS   VARCHAR2(14) NOT NULL, '||
                '  CHANNEL          NUMBER       NOT NULL, '||
                '  MDEV_ID          VARCHAR2(20) NOT NULL, '||
                '  MDEV_TYPE        VARCHAR2(20) NOT NULL, '||
                '  LOCATION_ID      NUMBER(10), '||
                '  MV_VALUE         NUMBER(19,4), '||
                '  MV_STATUS        NUMBER       DEFAULT 0, '||
                '  CAP_DEVICE_TYPE  VARCHAR2(20), '||
                '  CAP_DEVICE_ID    VARCHAR2(255), '||
                '  CAP_DATE_METER   NUMBER(19,4), '||
                '  CAP_DATE_DCU     NUMBER(19,4), '||
                '  LPCREATEDTIME    TIMESTAMP WITH TIME ZONE, '||
                '  CREATE_DATE      DATE         DEFAULT SYSDATE, '||
                '  DELIVER_DATE     DATE, '||
                '  CONSTRAINT IP_MV_DATA_'||TABLENAME.name||'_PK PRIMARY KEY (YYYYMMDDHHMMSS, MDEV_TYPE, MDEV_ID, CHANNEL) '||
                ') '||
                'PARTITION BY RANGE (YYYYMMDDHHMMSS) '||
                '( '||
                '  PARTITION PART'||to_char(CURRENT_DATE,'YYYYMMDD')||' VALUES LESS THAN ('''||to_char(CURRENT_DATE,'YYYYMMDD')||'235959'') '||
                ') TABLESPACE AIMIRPART ';
    EXECUTE IMMEDIATE STMT_DDL;
  END LOOP;
END;
/

-- Delivery step 1
DECLARE
  STMT_DDL VARCHAR2(2000);
BEGIN
  FOR TABLENAME IN (select 'EM' as name from dual union select 'GM' as name from dual union select 'WM' from dual union select 'HM' from dual)
  LOOP
    STMT_DDL := 'CREATE TABLE IP_MV_DELIVERY_'||TABLENAME.name||' '||
                '( '||
                '  YYYYMMDD         VARCHAR2(8)  NOT NULL, '||
                '  YYYYMMDDHHMMSS   VARCHAR2(14) NOT NULL, '||
                '  CHANNEL          NUMBER       NOT NULL, '||
                '  MDEV_ID          VARCHAR2(20) NOT NULL, '||
                '  MDEV_TYPE        VARCHAR2(20) NOT NULL, '||
                '  LOCATION_ID      NUMBER(10), '||
                '  MV_VALUE         NUMBER(19,4), '||
                '  MV_VALID         NUMBER       DEFAULT 0, '||
                '  MV_STATUS        NUMBER       DEFAULT 0, '||
                '  CAP_DEVICE_TYPE  VARCHAR2(20), '||
                '  CAP_DEVICE_ID    VARCHAR2(255), '||
                '  CAP_DATE_METER   NUMBER(19,4), '||
                '  CAP_DATE_DCU     NUMBER(19,4), '||
                '  LPCREATEDTIME    TIMESTAMP WITH TIME ZONE, '||
                '  CONSTRAINT IP_MV_DELIVERY_'||TABLENAME.name||'_PK PRIMARY KEY (MDEV_TYPE, MDEV_ID, YYYYMMDD, CHANNEL, YYYYMMDDHHMMSS) '||
                ') TABLESPACE AIMIRINT ';
    EXECUTE IMMEDIATE STMT_DDL;
  END LOOP;
END;
/

CREATE SEQUENCE IP_MV_BATCH_SEQUENCE;

CREATE TABLE IP_MV_BATCHES
(
  BATCH_ID     NUMBER,
  BATCH_STATUS NUMBER,
  TARGET_TABLE VARCHAR2(5)
  CREATE_DATE DATE DEFAULT CURRENT_DATE,
  DELIVERED_DATE DATE,
  SLA_DATE DATE,
  NUMBER_OF_ROWS NUMBER,
  CONSTRAINT IP_MV_BATCHES_PK PRIMARY KEY (BATCH_ID)
) TABLESPACE AIMIRINT;

CREATE GLOBAL TEMPORARY TABLE gtt_mv_batches ON COMMIT PRESERVE ROWS
AS
select batch_id,batch_status,target_table,sla_date
from ip_mv_batches where 1=0;

-- Delivery step 2
DECLARE
  STMT_DDL VARCHAR2(2000);
BEGIN
  FOR TABLENAME IN (select 'EM' as name from dual union select 'GM' as name from dual union select 'WM' from dual union select 'HM' from dual)
  LOOP
    STMT_DDL := 'CREATE TABLE IP_MV_OUTBOUND_'||TABLENAME.name||' '||
                '( '||
                '  ROWIDFORDELETE   ROWID, '||
                '  BATCH_ID         NUMBER, '||
                '  YYYYMMDD         VARCHAR2(8)  NOT NULL, '||
                '  YYYYMMDDHHMMSS   VARCHAR2(14) NOT NULL, '||
                '  CHANNEL          NUMBER       NOT NULL, '||
                '  OBIS_ID          VARCHAR2(30) NOT NULL, '||
                '  MDEV_ID          VARCHAR2(20) NOT NULL, '||
                '  MDEV_TYPE        VARCHAR2(20) NOT NULL, '||
                '  LOCATION_NAME    VARCHAR2(255), '||
                '  LOCATION_ID      NUMBER(10), '||
                '  MV_VALUE         NUMBER(19,4), '||
                '  MV_VALID         NUMBER       DEFAULT 0, '||
                '  MV_STATUS        NUMBER       DEFAULT 0, '||
                '  CAP_DEVICE_TYPE  VARCHAR2(20), '||
                '  CAP_DEVICE_ID    VARCHAR2(255), '||
                '  CAP_DATE_METER   NUMBER(19,4), '||
                '  CAP_DATE_DCU     NUMBER(19,4), '||
                '  LPCREATEDTIME    TIMESTAMP WITH TIME ZONE, '||
                '  DB$CREATED       DATE         DEFAULT SYSDATE '||
                ') '||CHR(10)||
                'PARTITION BY RANGE (DB$CREATED) SUBPARTITION BY HASH(BATCH_ID) '||CHR(10)||
                'SUBPARTITION TEMPLATE '||CHR(10)||
                '( '||CHR(10)||
                ' SUBPARTITION a, '||CHR(10)||
                ' SUBPARTITION b, '||CHR(10)||
                ' SUBPARTITION c, '||CHR(10)||
                ' SUBPARTITION d, '||CHR(10)||
                ' SUBPARTITION e, '||CHR(10)||
                ' SUBPARTITION f, '||CHR(10)||
                ' SUBPARTITION g, '||CHR(10)||
                ' SUBPARTITION h, '||CHR(10)||
                ' SUBPARTITION i, '||CHR(10)||
                ' SUBPARTITION j '||CHR(10)||
                ') '||CHR(10)||
                '( '||CHR(10)||
                '  PARTITION PART'||TO_CHAR(CURRENT_DATE,'YYYYMMDD')||' VALUES LESS THAN ('''||TO_CHAR(CURRENT_DATE+1,'YYYYMMDD')||'000000'') '||CHR(10)||
                ') TABLESPACE AIMIRPART ';
    EXECUTE IMMEDIATE STMT_DDL;
  END LOOP;
END;
/

CREATE INDEX IP_MV_OUTBOUND_EM_IDX_01 ON IP_MV_OUTBOUND_EM(BATCH_ID, MDEV_ID) LOCAL;
CREATE INDEX IP_MV_OUTBOUND_GM_IDX_01 ON IP_MV_OUTBOUND_WM(BATCH_ID, MDEV_ID) LOCAL;
CREATE INDEX IP_MV_OUTBOUND_WM_IDX_01 ON IP_MV_OUTBOUND_GM(BATCH_ID, MDEV_ID) LOCAL;
CREATE INDEX IP_MV_OUTBOUND_HM_IDX_01 ON IP_MV_OUTBOUND_HM(BATCH_ID, MDEV_ID) LOCAL;


CREATE TABLE IP_MV_CHANNELMAP
(
  MDEV_ID    VARCHAR2(20) NOT NULL,
  CHANNEL    NUMBER NOT NULL,
  MAPCHANNEL NUMBER NOT NULL
  CONSTRAINT IP_MV_CHANNELMAP_PK PRIMARY KEY(MDEV_ID,CHANNEL)
);



Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_TEMP_EM','DAILY','ALTER TABLE IP_MV_TEMP_EM ADD PARTITION PART{STARTDATE} VALUES LESS THAN(''{LASTSECOND}'') update indexes','dd',10,0,1);
Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_TEMP_EM DROP','DAILY','ALTER TABLE IP_MV_TEMP_EM DROP PARTITION PART{STARTDATE} update indexes','dd',15,-365,1);
Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_TEMP_WM','DAILY','ALTER TABLE IP_MV_TEMP_WM ADD PARTITION PART{STARTDATE} VALUES LESS THAN(''{LASTSECOND}'') update indexes','dd',10,0,1);
Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_TEMP_WM DROP','DAILY','ALTER TABLE IP_MV_TEMP_WM DROP PARTITION PART{STARTDATE} update indexes','dd',15,-365,1);
Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_TEMP_GM','DAILY','ALTER TABLE IP_MV_TEMP_GM ADD PARTITION PART{STARTDATE} VALUES LESS THAN(''{LASTSECOND}'') update indexes','dd',10,0,1);
Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_TEMP_GM DROP','DAILY','ALTER TABLE IP_MV_TEMP_GM DROP PARTITION PART{STARTDATE} update indexes','dd',15,-365,1);
Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_TEMP_HM','DAILY','ALTER TABLE IP_MV_TEMP_HM ADD PARTITION PART{STARTDATE} VALUES LESS THAN(''{LASTSECOND}'') update indexes','dd',10,0,1);
Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_TEMP_HM DROP','DAILY','ALTER TABLE IP_MV_TEMP_HM DROP PARTITION PART{STARTDATE} update indexes','dd',15,-365,1);

Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_DATA_EM','DAILY','ALTER TABLE IP_MV_DATA_EM ADD PARTITION PART{STARTDATE} VALUES LESS THAN(''{LASTSECOND}'') update indexes','dd',10,0,1);
Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_DATA_EM DROP','DAILY','ALTER TABLE IP_MV_DATA_EM DROP PARTITION PART{STARTDATE} update indexes','dd',15,-365,1);
Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_DATA_WM','DAILY','ALTER TABLE IP_MV_DATA_WM ADD PARTITION PART{STARTDATE} VALUES LESS THAN(''{LASTSECOND}'') update indexes','dd',10,0,1);
Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_DATA_WM DROP','DAILY','ALTER TABLE IP_MV_DATA_WM DROP PARTITION PART{STARTDATE} update indexes','dd',15,-365,1);
Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_DATA_GM','DAILY','ALTER TABLE IP_MV_DATA_GM ADD PARTITION PART{STARTDATE} VALUES LESS THAN(''{LASTSECOND}'') update indexes','dd',10,0,1);
Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_DATA_GM DROP','DAILY','ALTER TABLE IP_MV_DATA_GM DROP PARTITION PART{STARTDATE} update indexes','dd',15,-365,1);
Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_DATA_HM','DAILY','ALTER TABLE IP_MV_DATA_HM ADD PARTITION PART{STARTDATE} VALUES LESS THAN(''{LASTSECOND}'') update indexes','dd',10,0,1);
Insert into PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_DATA_HM DROP','DAILY','ALTER TABLE IP_MV_DATA_HM DROP PARTITION PART{STARTDATE} update indexes','dd',15,-365,1);

INSERT INTO PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_OUTBOUND_EM','DAILY','ALTER TABLE IP_MV_OUTBOUND_EM ADD     PARTITION PART{STARTDATE} VALUES LESS THAN(''{NEXTPERIODDATE}000000'') update indexes','dd',10,0,1);
INSERT INTO PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_OUTBOUND_WM','DAILY','ALTER TABLE IP_MV_OUTBOUND_WM ADD     PARTITION PART{STARTDATE} VALUES LESS THAN(''{NEXTPERIODDATE}000000'') update indexes','dd',10,0,1);
INSERT INTO PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_OUTBOUND_GM','DAILY','ALTER TABLE IP_MV_OUTBOUND_GM ADD     PARTITION PART{STARTDATE} VALUES LESS THAN(''{NEXTPERIODDATE}000000'') update indexes','dd',10,0,1);
INSERT INTO PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_OUTBOUND_HM','DAILY','ALTER TABLE IP_MV_OUTBOUND_HM ADD     PARTITION PART{STARTDATE} VALUES LESS THAN(''{NEXTPERIODDATE}000000'') update indexes','dd',10,0,1);

INSERT INTO PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_OUTBOUND_EM DROP','DAILY','ALTER TABLE IP_MV_OUTBOUND_EM DROP PARTITION PART{STARTDATE} update indexes','dd',15,-40,1);
INSERT INTO PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_OUTBOUND_WM DROP','DAILY','ALTER TABLE IP_MV_OUTBOUND_WM DROP PARTITION PART{STARTDATE} update indexes','dd',15,-40,1);
INSERT INTO PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_OUTBOUND_GM DROP','DAILY','ALTER TABLE IP_MV_OUTBOUND_GM DROP PARTITION PART{STARTDATE} update indexes','dd',15,-40,1);
INSERT INTO PARTITION_CONTROL (ID,PARTITIONINGINTERVAL,SQLCOMMAND,STARTDATETRUNCATE,ITERATIONS,STARTDATEOFFSET,ACTIVE) values ('IP_MV_OUTBOUND_HM DROP','DAILY','ALTER TABLE IP_MV_OUTBOUND_HM DROP PARTITION PART{STARTDATE} update indexes','dd',15,-40,1);


commit work;
