<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="config/schedule.properties"/>

    <!-- Configurer that replaces ${...} placeholders with values from a properties file -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="5"/>
        <property name="maxActive" value="15"/>
        <property name="maxIdle" value="10"/>
        <!--  <property name="validationQuery" value="select 1 from dual"/> -->
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>
        <property name="testWhileIdle" value="true"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
    </bean>

    <!-- Annotation Support Hibernate Session Factory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
                <prop key="hibernate.use_sql_comments">false</prop>
                <!--<prop key="hibernate.hbm2ddl.auto">create-drop</prop>-->
                <!--<prop key="hibernate.hbm2ddl.auto">create</prop>-->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->
                <prop key="hibernate.connection.autocommit">false</prop>
                <!--<prop key="hibernate.query.substitutions">Y</prop>-->
                <!--<prop key="hibernate.cache.use_second_level_cache">true</prop>-->
                <!--<prop key="hibernate.cache.use_second_level_cache">org.hibernate.cache.EhCacheProvider</prop>-->
                <!-- Turn batching off for better error messages under PostgreSQL>-->
                <!--prop key="hibernate.jdbc.batch_size">0</prop-->
                <!-- 0:none, 1:read_uncommitted, 2:read_committed, 4:repeatable_read, 8:serializable -->
                <prop key="hibernate.connection.isolation">1</prop>
            </props>
        </property>
        <property name="packagesToScan" value="com.aimir.model.*"/>
    </bean>

    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <!-- Activates scanning of @Autowired -->            
    <context:annotation-config/>

    <!-- Scans for @Repository, @Service -->
    <context:component-scan base-package="com.aimir">
        <context:exclude-filter type="regex" expression="com\.aimir\.fep.*"/>
    </context:component-scan>
    
    <!-- Enable @Transactional support -->
    <tx:annotation-driven/>

    <!-- Enable @AspectJ support -->
    <aop:aspectj-autoproxy/>

    <!-- Azbil Integration -->
    <bean id="dataSource_azbil" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="net.sourceforge.jtds.jdbc.Driver"/>
        <property name="url" value="jdbc:jtds:sqlserver://192.168.1.54:1433/NURI;instance=SQLEXPRESS"/>
        <!-- <property name="url" value="jdbc:jtds:sqlserver://localhost:61029/NURI"/> -->
        <property name="username" value="NURI"/>
        <property name="password" value="NURI12345"/>
    </bean>
    
    <bean id="azbilDao" class="com.aimir.schedule.task.bems.AzbilDao">
        <property name="dataSource" ref="dataSource_azbil"/>
    </bean>
 
    <bean id="azbilTask1" class="com.aimir.schedule.task.bems.AzbilTask1"/>
    
    <bean name="azbilJob1"
        class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.bems.AzbilJob1" />
        <!-- 
        <property name="jobDataAsMap">
            <map>
                <entry key="azbilTask" value-ref="azbilTask1" />
            </map>
        </property>
        -->
    </bean>
	
    <bean id="azbilTrigger1"
        class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="azbilJob1" />
        <property name="cronExpression" value="0 2/15 * * * ?" />
    </bean>
    
    <bean id="ktDeleteTask" class="com.aimir.schedule.task.bems.KT_DeleteTask"/>
	
	<bean name="ktDeleteJob"
        class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.bems.KT_DeleteJob" />
    </bean>
    
    <bean id="ktDeleteTrigger"
        class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="ktDeleteJob" />
        <property name="cronExpression" value="0 0 1 * * ?" />
    </bean>
    
    <!-- KT Sum (Old/New buildings) -->
    <bean id="meterEventLink" class="com.aimir.fep.meter.link.BulkMeterEventLink"/>
    <bean id="ktSumMDSaver" class="com.aimir.fep.meter.saver.OmniMDSaver"/>
    <bean id="ktSumTask" class="com.aimir.schedule.task.bems.KTSumTask"/>
    <bean name="ktSumJob"
        class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.bems.KTSumJob" />
        <!-- 
        <property name="jobDataAsMap">
            <map>
                <entry key="kTSumTask" value-ref="ktSumTask" />
            </map>
        </property>
        -->
    </bean>	
	
    <bean id="ktSumTrigger"
        class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="ktSumJob" />
        <property name="cronExpression" value="0 0/15 * * * ?" />
    </bean>       
    
    <bean id="kTTelecomSumTask" class="com.aimir.schedule.task.bems.KTTelecomSumTask"/>    
 
    <bean name="kTTelecomSumJob"
        class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.bems.KTTelecomSumJob" />
        <!-- 
        <property name="jobDataAsMap">
            <map>
                <entry key="kTTelecomSumTask" value-ref="kTTelecomSumTask" />
            </map>
        </property>
        -->
    </bean>
    
    <bean id="ktTelecomSumTrigger"
        class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="kTTelecomSumJob" />
        <property name="cronExpression" value="0 5 * * * ?" />
    </bean>
	
	<bean id="ktDataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
        <!--  <property name="driverClassName" value="com.microsoft.jdbc.sqlserver.SQLServerDriver" />-->
        <property name="driverClassName" value="net.sourceforge.jtds.jdbc.Driver" />
        <!-- 연동시 localhost를 변경해야 한다. -->
        <!--  
        <property name="url" value="jdbc:microsoft.sqlserver://192.168.1.100:1433;EIBS" />
        -->
        <property name="url" value="jdbc:jtds:sqlserver://192.168.1.100:1433;EIBS" />
        <property name="username" value="nuri" />
        <property name="password" value="nuri1" />
        <property name="initialSize" value="1" />
        <property name="maxActive" value="10" />
        <property name="maxIdle" value="10" />
        <!--  <property name="validationQuery" value="select 1 from dual"/> -->
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="false" />
        <property name="testWhileIdle" value="true" />
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
    </bean>
    
    <bean id="ktMobileInsertTask" class="com.aimir.schedule.task.bems.KTMobileInsertTask">
        <property name="dataSource" ref="ktDataSource"/>
    </bean>
    
    <bean name="ktMobileInsertJob"
        class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.bems.KTMobileInsertJob" />
        <!-- 
        <property name="jobDataAsMap">
            <map>
                <entry key="kTMobileInsertTask" value-ref="ktMobileInsertTask" />
            </map>
        </property>
        -->
    </bean>
    
    <bean id="ktMobileCronTrigger"
        class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="ktMobileInsertJob" />
        <property name="cronExpression" value="0 0 2 * * ?" />
    </bean>
    
   
    <bean id="getTemperatureDataTask" class="com.aimir.schedule.task.GetTemperatureDataTask" />
  
    <bean name="getTemperatureDataJob"
        class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.GetTemperatureDataJob" />
        <!-- 
        <property name="jobDataAsMap">
            <map>
                <entry key="temperatureDataTask" value-ref="getTemperatureDataTask" />
            </map>
        </property>
        -->
    </bean>
	
    <bean id="temperatureTrigger"
        class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="getTemperatureDataJob" />
        <property name="cronExpression" value="0 0 3,12,18 * * ?" />
    </bean>
   
    <bean id="schedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="jobDetails">
            <list>
                <ref bean="azbilJob1"/>
                <ref bean="ktSumJob"/>			 
                <ref bean="ktMobileInsertJob"/>
                <ref bean="getTemperatureDataJob"/>
                <ref bean="kTTelecomSumJob"/>
                <ref bean="ktDeleteJob"/>
            </list>
        </property>
        <property name="schedulerContextAsMap">
            <map>
                <entry key="azbilTask" value-ref="azbilTask1" />
                <entry key="kTSumTask" value-ref="ktSumTask" />
                <entry key="kTTelecomSumTask" value-ref="kTTelecomSumTask" />
                <entry key="kTMobileInsertTask" value-ref="ktMobileInsertTask" />
                <entry key="temperatureDataTask" value-ref="getTemperatureDataTask" />
                <entry key="ktDeleteTask" value-ref="ktDeleteTask" />
            </map>
        </property>
        <property name="triggers">
            <list>
                <ref bean="azbilTrigger1"/>
                <ref bean="ktSumTrigger"/>			  
                <ref bean="ktMobileCronTrigger"/>
                <ref bean="temperatureTrigger"/>
                <ref bean="ktTelecomSumTrigger" />
                <ref bean="ktDeleteTrigger" />
            </list>
        </property>
        <property name="dataSource" ref="dataSource"/>
        <property name="autoStartup" value="true"/>
        <property name="overwriteExistingJobs" value="true"/>
        <property name="transactionManager" ref="transactionManager"/>
    </bean>
   
</beans>
