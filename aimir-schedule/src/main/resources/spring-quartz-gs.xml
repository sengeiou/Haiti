<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="config/schedule.properties"/>

    <!-- Configurer that replaces ${...} placeholders with values from a properties file -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="5"/>
        <property name="maxActive" value="15"/>
        <property name="maxIdle" value="10"/>
        <!--  <property name="validationQuery" value="select 1 from dual"/> -->
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>
        <property name="testWhileIdle" value="true"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
    </bean>

    <!-- Annotation Support Hibernate Session Factory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
                <prop key="hibernate.use_sql_comments">false</prop>
                <!--<prop key="hibernate.hbm2ddl.auto">create-drop</prop>-->
                <!--<prop key="hibernate.hbm2ddl.auto">create</prop>-->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->
                <prop key="hibernate.connection.autocommit">false</prop>
                <!--<prop key="hibernate.query.substitutions">Y</prop>-->
                <!--<prop key="hibernate.cache.use_second_level_cache">true</prop>-->
                <!--<prop key="hibernate.cache.use_second_level_cache">org.hibernate.cache.EhCacheProvider</prop>-->
                <!-- Turn batching off for better error messages under PostgreSQL>-->
                <!--prop key="hibernate.jdbc.batch_size">0</prop-->
                <!-- 0:none, 1:read_uncommitted, 2:read_committed, 4:repeatable_read, 8:serializable -->
                <prop key="hibernate.connection.isolation">1</prop>
            </props>
        </property>
        <property name="packagesToScan" value="com.aimir.model.*"/>
    </bean>

    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <!-- Activates scanning of @Autowired -->            
    <context:annotation-config/>

    <!-- Scans for @Repository, @Service -->
    <context:component-scan base-package="com.aimir">
        <context:exclude-filter type="regex" expression="com\.aimir\.fep.*"/>
    </context:component-scan>
    
    <!-- Enable @Transactional support -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- Enable @AspectJ support -->
    <aop:aspectj-autoproxy/>

    <bean id="meterEventLink" class="com.aimir.fep.meter.link.JsgtMeterEventLink"/>
    <bean id="fmpProperty" class="com.aimir.fep.util.FMPProperty"/>
    <bean id="sumMDSaver" class="com.aimir.fep.meter.saver.OmniMDSaver"/>
    
    <!--   GS METER SUM  -->
    <bean id="gsSumTask" class="com.aimir.schedule.task.bems.GSSumTask"/>
    <bean name="gsSumJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        	<property name="jobClass" value="com.aimir.schedule.job.bems.GSSumJob" />
    </bean>	
    <bean id="gsSumTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="gsSumJob" />
        <property name="cronExpression" value="0 10 * * * ?" />
    </bean>    
       
    <!--  GS GAS METER SUM -->
    <bean id="gmSumTask" class="com.aimir.schedule.task.bems.GMSumTask"/>
    <bean name="gmSumJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        	<property name="jobClass" value="com.aimir.schedule.job.bems.GMSumJob" />
    </bean>	
    <bean id="gmSumTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="gmSumJob" />
        <property name="cronExpression" value="0 10 * * * ?" />
    </bean>
    
    <!--  GS WATER  METER SUM -->
    <bean id="wmSumTask" class="com.aimir.schedule.task.ems.WMSumTask"/>
    <bean name="wmSumJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        	<property name="jobClass" value="com.aimir.schedule.job.bems.WMSumJob" />
    </bean>	
    <bean id="wmSumTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="wmSumJob" />
        <property name="cronExpression" value="0 10 * * * ?" />
    </bean>
    
    <bean id="gswrithingLSTask" class="com.aimir.schedule.task.bems.GSwrithingLSTask"/>
    <bean name="gswrithingLSJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        	<property name="jobClass" value="com.aimir.schedule.job.bems.GSwrithingLSJob" />
    </bean>	
    <bean id="gswrithingLSTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="gswrithingLSJob" />
        <property name="cronExpression" value="0 10 * * * ?" />
    </bean>  
      
      <!--  GS Temperature -->
    <bean id="getTemperatureDataTask" 
			class="com.aimir.schedule.task.GetTemperatureDataTask" />
    <bean name="getTemperatureDataJob"
			class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" 
			value="com.aimir.schedule.job.GetTemperatureDataJob" />
    </bean> 
	<bean id="temperatureTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="getTemperatureDataJob" />
		<property name="cronExpression" value="0 30 3,15 * * ?" />
    </bean>
 
	<bean id="schedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> 
	<property name="jobFactory">
       		<bean class="org.springframework.scheduling.quartz.SpringBeanJobFactory" />
       	</property>
		<property name="jobDetails">
			<list>
			   <ref bean="gsSumJob"/>		
			   <ref bean="gswrithingLSJob"/>	 
			   <ref bean="getTemperatureDataJob"/>
			</list>
		</property>
		<property name="schedulerContextAsMap">
            <map>
                <entry key="GSSumTask" value-ref="gsSumTask" />
                <entry key="GSwrithingLSTask" value-ref="gswrithingLSTask" />
                <entry key="temperatureDataTask" value-ref="getTemperatureDataTask" />
            </map>
        </property>
		<property name="triggers">
			<list>
			  <ref bean="gsSumTrigger"/>	
			  <ref bean="gswrithingLSTrigger"/>				  
			  <ref bean="temperatureTrigger"/>
			</list>
		</property>
		<property name="dataSource" ref="dataSource"/>
		<property name="autoStartup" value="true"/>
        <property name="overwriteExistingJobs" value="true"/>
        <property name="transactionManager" ref="transactionManager"/>
	</bean>

   
</beans>