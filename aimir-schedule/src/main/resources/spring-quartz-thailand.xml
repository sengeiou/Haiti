<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="config/schedule.properties"/>

    <!-- Configurer that replaces ${...} placeholders with values from a properties file -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="5"/>
        <property name="maxActive" value="15"/>
        <property name="maxIdle" value="10"/>
        <!--  <property name="validationQuery" value="select 1 from dual"/> -->
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>
        <property name="testWhileIdle" value="true"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
    </bean>

    <!-- Annotation Support Hibernate Session Factory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
                <prop key="hibernate.use_sql_comments">false</prop>
                <!--<prop key="hibernate.hbm2ddl.auto">create-drop</prop>-->
                <!--<prop key="hibernate.hbm2ddl.auto">create</prop>-->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->
                <prop key="hibernate.connection.autocommit">false</prop>
                <!--<prop key="hibernate.query.substitutions">Y</prop>-->
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">org.hibernate.cache.EhCacheProvider</prop>
                <!-- Turn batching off for better error messages under PostgreSQL>-->
                <!--prop key="hibernate.jdbc.batch_size">0</prop-->
                <!-- 0:none, 1:read_uncommitted, 2:read_committed, 4:repeatable_read, 8:serializable -->
                <prop key="hibernate.connection.isolation">1</prop>
                <prop key="hibernate.transaction.flush_before_completion">true</prop>
                <prop key="hibernate.transaction.auto_close_session">false</prop>
            </props>
        </property>
        <property name="packagesToScan" value="com.aimir.model.*"/>
    </bean>

    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- Activates scanning of @Autowired -->
    <context:annotation-config/>
    
    <!-- Scans for @Repository, @Service -->
    <context:component-scan base-package="com.aimir">
        <context:exclude-filter type="regex" expression="com\.aimir\.fep.*"/>
    </context:component-scan>

    <!-- Enable @Transactional support -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- Enable @AspectJ support -->
    <aop:aspectj-autoproxy/>

    
    <bean id="meterProgramTask" class="com.aimir.schedule.task.MeterProgramTask" scope="prototype"/>
    <bean name="meterProgramJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.MeterProgramJob" />
        <property name="description" value="Setup Meter Program(TOU, SummerTime..)"/>
        
    </bean>

    <!-- Group OnDemand Meter Schedule -->
    <bean id="groupOndemandMeterTask" class="com.aimir.schedule.task.GroupOndemandMeterTask" scope="prototype"/>
    <bean name="groupOndemandMeterJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.GroupOndemandMeterJob" />
        <property name="description" value="Group by ondemand meter."/>
        
    </bean>

	<!-- SAP Read Table -->
	<bean id="mx2_ReadTableTask" class="com.aimir.schedule.task.meathailand.MX2_ReadTableSAPTask"  scope="prototype">
		<property name="modemModel" value="NAMR-P114GP_MX2"/>
		<property name="meterConfigName" value="MX2"/>
	</bean>
	<bean name="mx2_ReadTableJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.meathailand.MX2_ReadTableSAPJob" />
        <property name="description" value="Read Table for SAP"/>
        
    </bean>
    
    <!-- daily time synch -->
    <bean id="dailyTimeSynchTask" class="com.aimir.schedule.task.DailyTimeSynchTask" scope="prototype"/>
    <bean name="dailyTimeSynchJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.DailyTimeSynchJob" />
        <property name="description" value="Daily Time Synch"/>
        
    </bean>
    
    <!-- mx2 import -->
    <bean id="mx2_ImportTask" class="com.aimir.schedule.task.meathailand.MX2_ImportTask" scope="prototype"/>
    <bean name="mx2_ImportJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.meathailand.MX2_ImportJob"/>
        
    </bean>
    <bean id="mx2_ImportTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="mx2_ImportJob"/>
        <property name="cronExpression" value="0 * * * * ?"/> 
    </bean>    
    
    <!-- Sap output schedule -->
    <bean id="mx2_ExportTask" class="com.aimir.schedule.task.meathailand.MX2SAPExportTask"/>
    <bean name="mx2_ExportJob" class="org.springframework.scheduling.quartz.JobDetailBean">
    	<property name="jobClass" value="com.aimir.schedule.job.meathailand.MX2SAPExportJob"/>
    	<property name="description" value="MX2 SAP Export"/>
    	
    </bean>
    
	<bean name="globalTriggerListener" class="com.aimir.schedule.listener.GlobalTriggerListener">
        <property name="listenerType" value="Global"/>
    </bean>

	<bean name="schedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobFactory">
            <bean class="org.springframework.scheduling.quartz.SpringBeanJobFactory" />
        </property>
        <property name="jobDetails">
			<list>
				<ref bean="groupOndemandMeterJob" />
				<ref bean="dailyTimeSynchJob" />
				<ref bean="meterProgramJob" />
				<ref bean="mx2_ReadTableJob" />
				<ref bean="mx2_ExportJob" />
				<ref bean="mx2_ImportJob"/>
			</list>
		</property>
		<property name="schedulerContextAsMap">
            <map>
                <entry key="groupOndemandMeterTask" value-ref="groupOndemandMeterTask" />
                <entry key="dailyTimeSynchTask" value-ref="dailyTimeSynchTask" />
                <entry key="meterProgramTask" value-ref="meterProgramTask" />
                <entry key="mX2_ReadTableSAPTask" value-ref="mx2_ReadTableTask" />
                <entry key="mX2_ImportTask" value-ref="mx2_ImportTask"/>
                <entry key="mX2_ExportTask" value-ref="mx2_ExportTask" />
            </map>
        </property>
        <property name="triggers">
            <list>
                <ref bean="mx2_ImportTrigger"/>
            </list>
        </property>
        <property name="globalTriggerListeners" ref="globalTriggerListener"/>
        <property name="dataSource" ref="dataSource"/>
		<property name="transactionManager" ref="transactionManager"/>    
    </bean>
</beans>