<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="config/schedule.properties"/>

    <!-- Configurer that replaces ${...} placeholders with values from a properties file -->
    <bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="idleConnectionTestPeriodInMinutes" value="5"/>
        <property name="idleMaxAgeInMinutes" value="60"/>
        <property name="maxConnectionsPerPartition" value="3"/>
        <property name="minConnectionsPerPartition" value="1"/>
        <property name="partitionCount" value="1"/>
        <property name="acquireIncrement" value="1"/>
        <property name="statementsCacheSize" value="100"/>
    </bean>
    
    <bean id="auditDataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="idleConnectionTestPeriodInMinutes" value="5"/>
        <property name="idleMaxAgeInMinutes" value="60"/>
        <property name="maxConnectionsPerPartition" value="3"/>
        <property name="minConnectionsPerPartition" value="1"/>
        <property name="partitionCount" value="1"/>
        <property name="acquireIncrement" value="1"/>
        <property name="statementsCacheSize" value="100"/>
    </bean>
    
    <!-- Audit Log Support Hibernate Session Factory -->
    <bean id="auditSessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="auditDataSource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">false</prop>
                <prop key="hibernate.use_sql_comments">false</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.connection.autocommit">false</prop>
            </props>
        </property>
        <property name="annotatedClasses">
            <list>
                <value>com.aimir.model.system.AuditLog</value>
            </list>
        </property>
    </bean>
    
    <bean id="auditLogInterceptor" class="com.aimir.audit.AuditLogInterceptor">
        <property name="transactionManager" ref="auditTransactionManager"/>
    </bean>
    
    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="auditTransactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="auditSessionFactory"/>
    </bean>
    
    <!-- Annotation Support Hibernate Session Factory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="entityInterceptor" ref="auditLogInterceptor"/>
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
                <prop key="hibernate.use_sql_comments">false</prop>
                <!--<prop key="hibernate.hbm2ddl.auto">create-drop</prop>-->
                <!--<prop key="hibernate.hbm2ddl.auto">create</prop> -->
                <prop key="hibernate.hbm2ddl.auto">false</prop>
                <prop key="hibernate.connection.autocommit">false</prop>
                <!--<prop key="hibernate.query.substitutions">Y</prop>-->
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">org.hibernate.cache.EhCacheProvider</prop>
                <!-- Turn batching off for better error messages under PostgreSQL>-->
                <!--prop key="hibernate.jdbc.batch_size">0</prop-->
                <!-- 0:none, 1:read_uncommitted, 2:read_committed, 4:repeatable_read, 8:serializable -->
                <prop key="hibernate.connection.isolation">1</prop>
                <prop key="hibernate.transaction.flush_before_completion">true</prop>
                <prop key="hibernate.transaction.auto_close_session">false</prop>
                <prop key="hibernate.default_schema">${jdbc.username}</prop>
            </props>
        </property>
        <property name="packagesToScan" value="com.aimir.model.*"/>
    </bean>
    
    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- Activates scanning of @Autowired -->
    <context:annotation-config/>

    <!-- Scans for @Repository, @Service -->
    <context:component-scan base-package="com.aimir">
        <context:exclude-filter type="regex" expression="com\.aimir\.fep.*"/>
    </context:component-scan>

    <!-- Enable @Transactional support -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- Enable @AspectJ support -->
    <aop:aspectj-autoproxy/>

    <!--  Schedule Task -->
    <bean id="balanceMonitorTask" class="com.aimir.schedule.task.BalanceMonitorV2Task"/>
    <bean id="billingTask" class="com.aimir.schedule.task.ECGBillingIntegrationTask"/>
    <bean id="dailyEMBillingInfoSaveTask" class="com.aimir.schedule.task.ECGBlockDailyEMBillingInfoSaveV2Task" />
    <bean id="dailyGMBillingInfoSaveTask" class="com.aimir.schedule.task.DailyGMBillingInfoSaveTask" />
    <bean id="dailyWMBillingInfoSaveTask" class="com.aimir.schedule.task.DailyWMBillingInfoSaveTask" />
    <bean id="monthlyBillingTask" class="com.aimir.schedule.task.ECGBillingMonthlyTask"/>
    <bean id="monthlyBillingExcelTask" class="com.aimir.schedule.task.ECGBillingMonthlyExcelTask"/>
    <bean id="sendSMSTask" class="com.aimir.schedule.task.PrepaySendSMSTask"/>

    <!--  Schedule Job -->
    <bean name="balanceMonitoringJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.BalanceMonitorJob" />
    </bean>

    <bean name="billingJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.ECGBillingIntegrationJob" />
    </bean>

    <bean name="dailyBillingInfoSaveJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.ECGDailyBillingInfoSaveJob" />
    </bean>

    <bean name="monthlyBillingJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.ECGMonthlyBillingJob" />
    </bean>

    <bean name="PrepaySendSMSJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.PrepaySendSMSJob"/>
    </bean>

    <bean name="monthlyReportJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.aimir.schedule.job.ECGMonthlyReportJob"/>
    </bean>

    <!-- Schedule Trigger -->
    <bean id="balanceMonitoringTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="balanceMonitoringJob" />
        <!-- 매시 실행 -->
        <property name="cronExpression" value="0 0 * * * ?" />
    </bean>

    <bean id="billingTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="billingJob" />
        <!-- 매달 말일 16시 실행 -->
        <property name="cronExpression" value="0 0 16 L * ?" />
    </bean>

    <bean id="dailyBillingInfoSaveTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="dailyBillingInfoSaveJob" />
        <!-- 매시 실행 -->
        <property name="cronExpression" value="0 10 * * * ?" />
    </bean>

    <bean id="monthlyBalanceBillingTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="monthlyBillingJob" />
        <!-- 매월 1일 실행 -->
        <property name="cronExpression" value="0 0 7,19 1 * ?" />
    </bean>

    <bean id="monthlyBalanceReportTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="monthlyReportJob" />
    </bean>

    <bean id="PrepaySendSMSTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="PrepaySendSMSJob"/>
        <!-- 매시 16분 실행 -->
        <property name="cronExpression" value="0 16 13 * * ?"/>
    </bean>

    <bean id="schedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="jobDetails">
            <list>
                <ref bean="balanceMonitoringJob" />
                <ref bean="billingJob" />
                <ref bean="dailyBillingInfoSaveJob" />
                <ref bean="monthlyBillingJob" />
                <ref bean="monthlyReportJob"/>
                <ref bean="PrepaySendSMSJob" />
            </list>
        </property>
 <!--        <property name="schedulerContextAsMap">
            <map>
                <entry key="balanceMonitorTask" value-ref="balanceMonitorTask"/>
                <entry key="eCGBillingIntegrationTask" value-ref="billingTask" />
                <entry key="dailyEMBillingInfoSaveTask" value-ref="dailyEMBillingInfoSaveTask" />
                <entry key="dailyGMBillingInfoSaveTask" value-ref="dailyGMBillingInfoSaveTask" />
                <entry key="dailyWMBillingInfoSaveTask" value-ref="dailyWMBillingInfoSaveTask" />
                <entry key="eCGMonthlyBillingTask" value-ref="monthlyBillingTask" />
            </map>
        </property> -->
        <property name="triggers">
            <list>
                <ref bean="balanceMonitoringTrigger"/>
                <ref bean="billingTrigger"/>
                <ref bean="dailyBillingInfoSaveTrigger" />
                <ref bean="monthlyBalanceBillingTrigger"/>
                <!-- <ref bean="monthlyBalanceReportTrigger"/> -->
                <ref bean="PrepaySendSMSTrigger"/>
            </list>
        </property>
        <!-- <property name="dataSource" ref="dataSource"/>-->
        <property name="autoStartup" value="true"/>
        <property name="overwriteExistingJobs" value="true"/>
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

</beans>
