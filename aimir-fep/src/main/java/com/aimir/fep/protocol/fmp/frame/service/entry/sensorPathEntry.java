package com.aimir.fep.protocol.fmp.frame.service.entry;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;

import com.aimir.fep.protocol.fmp.datatype.BYTE;
import com.aimir.fep.protocol.fmp.datatype.CHAR;
import com.aimir.fep.protocol.fmp.datatype.HEX;
import com.aimir.fep.protocol.fmp.datatype.OCTET;
import com.aimir.fep.protocol.fmp.datatype.TIMESTAMP;
import com.aimir.fep.protocol.fmp.datatype.WORD;
import com.aimir.fep.protocol.fmp.frame.service.Entry;
import com.aimir.fep.util.Hex;

/**
 * sensorPathEntry (4.4)
 * generated by MIB Tool, Do not modify
 *
 * 1.1 sensorPathModel size 20 -> 18 (Jiwoong Park | wll27471297@nuritelecom.com )
 *
 * @author J.S Park (elevas@nuritelecom.com)
 * @version 1.1 2019-11-21
 */

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CustEnt", propOrder = {
    "sensorPathID",
    "sensorPathSerial",
    "sensorPathModel",
    "sensorPathShortID",
    "sensorPathHops",
    "sensorPathNode",
    "sensorPathTime",
    "sensorPathLQI",
    "sensorPathRSSI"
})

public class sensorPathEntry extends Entry {

	private static final long serialVersionUID = 5727872132110978185L;

	/* 4.4.1 */
	@XmlElement(name = "sensorPathID")
    public HEX sensorPathID = new HEX(8);
 
    /* 4.4.2 */
	@XmlElement(name = "sensorPathSerial")
	public OCTET sensorPathSerial = new OCTET(20);

	/* 4.4.3 */
	@XmlElement(name = "sensorPathModel")
	public OCTET sensorPathModel = new OCTET(18);

	/* 4.4.4 */
	@XmlElement(name = "sensorPathShortID")
	public WORD sensorPathShortID =	new WORD();
	
	/* 4.4.5 */
	@XmlElement(name = "sensorPathHops")
	public BYTE sensorPathHops = new BYTE();
	
	/* 4.4.6 */
	@XmlElement(name = "sensorPathNode")
	public OCTET sensorPathNode = new OCTET(60);
    
	/* 4.4.7 */
	@XmlElement(name = "sensorPathTime")
    public TIMESTAMP sensorPathTime = new TIMESTAMP(7); 
    
    /* 4.4.8 */
	@XmlElement(name = "sensorPathLQI")
    public BYTE sensorPathLQI = new BYTE();
    
    /* 4.4.9 */
	@XmlElement(name = "sensorPathRSSI")
    public CHAR sensorPathRSSI = new CHAR();

//    @XmlTransient
    public HEX getSensorPathID(){
        return sensorPathID;
    }

    public void setSensorPathID(HEX sensorPathID){
        this.sensorPathID = sensorPathID;
    }

//    @XmlTransient
    public OCTET getSensorPathSerial(){
        return sensorPathSerial;
    }

    public void setSensorPathSerial(OCTET sensorPathSerial){
        this.sensorPathSerial = sensorPathSerial;
    }

//    @XmlTransient
    public OCTET getSensorPathModel(){
        return sensorPathModel;
    }

    public void setSensorPathModel(OCTET sensorPathModel){
        this.sensorPathModel = sensorPathModel;
    }

//    @XmlTransient
    public WORD getSensorPathShortID(){
        return sensorPathShortID;
    }

    public void setSensorPathShortID(WORD sensorPathShortID){
        this.sensorPathShortID = sensorPathShortID;
    }

//    @XmlTransient
    public BYTE getSensorPathHops(){
        return sensorPathHops;
    }

    public void setSensorPathHops(BYTE sensorPathHops){
        this.sensorPathHops = sensorPathHops;
    }

//    @XmlTransient
    public OCTET getSensorPathNode(){
        return sensorPathNode;
    }

    public void setSensorPathNode(OCTET sensorPathNode){
        this.sensorPathNode = sensorPathNode;
    }

//    @XmlTransient
    public TIMESTAMP getSensorPathTime(){
        return sensorPathTime;
    }

    public void setSensorPathTime(TIMESTAMP sensorPathTime){
        this.sensorPathTime = sensorPathTime;
    }

//    @XmlTransient
    public BYTE getSensorPathLQI(){
        return sensorPathLQI;
    }

    public void setSensorPathLQI(BYTE sensorPathLQI){
        this.sensorPathLQI = sensorPathLQI;
    }

//    @XmlTransient
    public CHAR getSensorPathRSSI(){
        return sensorPathRSSI;
    }

    public void setSensorPathRSSI(CHAR sensorPathRSSI){
        this.sensorPathRSSI = sensorPathRSSI;
    }

    public String toString(){
        StringBuffer sb = new StringBuffer();

		sb.append("CLASS["+this.getClass().getName()+"]\n");
		sb.append("sensorPathID["+sensorPathID.getValue()+"]: " + sensorPathID + "\n");
		sb.append("sensorPathSerial["+sensorPathSerial.toHexString()+"]: " + sensorPathSerial + "\n");
		sb.append("sensorPathModel["+sensorPathModel.toHexString()+"]: " + sensorPathModel + "\n");
		sb.append("sensorPathShortID: " + Hex.decode(sensorPathShortID.encode()) + "\n");
		sb.append("sensorPathHops["+Hex.decode(sensorPathHops.encode())+"]: " + sensorPathHops + "\n");
		sb.append("sensorPathNode: [");
		for(int i = 0; i < sensorPathNode.toHexString().length(); i += 4) {
			sb.append(sensorPathNode.toHexString().substring(i, i+4));
			if(i+4 < sensorPathNode.toHexString().length())
				sb.append("-");
		}
		sb.append("]\n");
        sb.append("sensorPathTime["+Hex.decode(sensorPathTime.encode())+"]: " + sensorPathTime + "\n");
        sb.append("sensorPathLQI["+Hex.decode(sensorPathLQI.encode())+"]: " + sensorPathLQI + "\n");
        sb.append("sensorPathRSSI["+Hex.decode(sensorPathRSSI.encode())+"]: " + (byte)Integer.valueOf(Hex.decode(sensorPathRSSI.encode()), 16).intValue() + "\n");
        return sb.toString();
    }
}
