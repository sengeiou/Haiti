/**
 * (@)# DlmsConstants.java
 *
 * 2016. 4. 12.
 *
 * Copyright (c) 2013 NURITELECOM, Inc.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of 
 * NURITELECOM, Inc. ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with NURITELECOM, Inc.
 *
 * For more information on this product, please see
 * http://www.nuritelecom.co.kr
 *
 */
package com.aimir.fep.bypass.decofactory.consts;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.aimir.fep.util.DataUtil;

/**
 * @author simhanger
 *
 */
public class DlmsConstants {
	private static Logger logger = LoggerFactory.getLogger(DlmsConstants.class);

	/**
	 * STANDARDISED XDLMS PDUS USED IN DLMS/COSEM
	 * Green Book 9.5 Abstract syntax of COSEM PDUs 참조할것.
	 * @author simhanger
	 *
	 */
	public enum XDLMS_APDU {
		// WITH NO CIPHERING
		  INITIATEREQUEST(1)            //IMPLICIT INITIATEREQUEST,
		, READREQUEST(5)                //IMPLICIT READREQUEST,
		, WRITEREQUEST(6)               //IMPLICIT WRITEREQUEST,
		, INITIATERESPONSE(8)           //IMPLICIT INITIATERESPONSE,
		, READRESPONSE(12)              //IMPLICIT READRESPONSE,
		, WRITERESPONSE(13)             //IMPLICIT WRITERESPONSE,
		, CONFIRMEDSERVICEERROR(14)     //CONFIRMEDSERVICEERROR,
		
		// DATA_NOTIFICATION
		, DATA_NOTIFICATION(15)         //IMPLICIT DATA_NOTIFICATION,
		, UNCONFIRMEDWRITEREQUEST(22)   //IMPLICIT UNCONFIRMEDWRITEREQUEST,
		, INFORMATIONREPORTREQUEST(24)  //IMPLICIT INFORMATIONREPORTREQUEST,
		
		// THE APDU TAG OF EACH CIPHERED XDLMS APDU INDICATES THE TYPE OF THE UNCIPHERED APDU AND WHETHER
		// GLOBAL OR DEDICATED KEY IS USED. THE TYPE OF THE KEY IS CARRIED BY THE SECURITY HEADER, AND AFTER
		// REMOVING THE ENCRYPTION AND/OR VERIFYING THE AUTHENTICATION TAG, THE ORIGINAL APDU WITH ITS APDU
		// TAG IS RESTORED. THEREFORE, THE APDU TAGS OF THE CIPHERED APDUS CARRY REDUNDANT INFORMATION, BUT
		// THEY ARE RETAINED FOR CONSISTENCY.
		
		// WITH GLOBAL CIPHERING
		, GLO_INITIATEREQUEST(33)       //IMPLICIT OCTET STRING,
		, GLO_READREQUEST(37)           //IMPLICIT OCTET STRING,
		, GLO_WRITEREQUEST(38)          //IMPLICIT OCTET STRING,
		, GLO_INITIATERESPONSE(40)      //IMPLICIT OCTET STRING,
		, GLO_READRESPONSE(44)          //IMPLICIT OCTET STRING,
		, GLO_WRITERESPONSE(45)           //IMPLICIT OCTET STRING,
		, GLO_CONFIRMEDSERVICEERROR(46)   //IMPLICIT OCTET STRING,
		, GLO_UNCONFIRMEDWRITEREQUEST(54) //IMPLICIT OCTET STRING,
		, GLO_INFORMATIONREPORTREQUEST(56)//IMPLICIT OCTET STRING,
		
		// WITH DEDICATED CIPHERING
		// NOT USED IN DLMS/COSEM
		, DED_INITIATEREQUEST(65)         //IMPLICIT OCTET STRING,
		, DED_READREQUEST(69)             //IMPLICIT OCTET STRING,
		, DED_WRITEREQUEST(70)            //IMPLICIT OCTET STRING,
		
		// NOT USED IN DLMS/COSEM
		, DED_INITIATERESPONSE(72)        //IMPLICIT OCTET STRING,
		, DED_READRESPONSE(76)            //IMPLICIT OCTET STRING,
		, DED_WRITERESPONSE(77)           //IMPLICIT OCTET STRING,
		, DED_CONFIRMEDSERVICEERROR(78)   //IMPLICIT OCTET STRING,
		, DED_UNCONFIRMEDWRITEREQUEST(86) //IMPLICIT OCTET STRING,
		, DED_INFORMATIONREPORTREQUEST(88)//IMPLICIT OCTET STRING,
		
		
		, AARQ(96)  // AARQ ::= [APPLICATION 0] IMPLICIT SEQUENCE, [APPLICATION 0] == [ 60H ] = [ 96 ]
		, AARE(97)  // AARE-apdu ::= [APPLICATION 1] IMPLICIT SEQUENCE, [APPLICATION 1] == [ 61H ] = [ 97 ]
		, RLRQ(98)  // RLRQ-apdu ::= [APPLICATION 2] IMPLICIT SEQUENCE, [APPLICATION 2] == [ 62H ] = [ 98 ]
		, RLRE(99)  // RLRE-apdu ::= [APPLICATION 3] IMPLICIT SEQUENCE,  [APPLICATION 3] == [ 63H ] = [ 99 ]
		
		
		// XDLMS APDUS USED WITH LN REFERENCING
		// WITH NO CIPHERING
		, GET_REQUEST(192)                //IMPLICIT GET_REQUEST,
		, SET_REQUEST(193)                //IMPLICIT SET_REQUEST,
		, EVENT_NOTIFICATION_REQUEST(194) //IMPLICIT EVENTNOTIFICATIONREQUEST,DLMS USER ASSOCIATION, DLMS/COSEM ARCHITECTURE AND PROTOCOLS, EDITION 8.1
		, ACTION_REQUEST(195)             //IMPLICIT ACTION_REQUEST,
		, GET_RESPONSE(196)               //IMPLICIT GET_RESPONSE,
		, SET_RESPONSE(197)               //IMPLICIT SET_RESPONSE,
		, ACTION_RESPONSE(199)            //IMPLICIT ACTION_RESPONSE,
		
		// WITH GLOBAL CIPHERING
		, GLO_GET_REQUEST(200)            //IMPLICIT OCTET STRING,
		, GLO_SET_REQUEST(201)            //IMPLICIT OCTET STRING,
		, GLO_EVENT_NOTIFICATION_REQUEST(202)   //IMPLICIT OCTET STRING,
		, GLO_ACTION_REQUEST(203)               //IMPLICIT OCTET STRING,
		, GLO_GET_RESPONSE(204)                 //IMPLICIT OCTET STRING,
		, GLO_SET_RESPONSE(205)                 //IMPLICIT OCTET STRING,
		, GLO_ACTION_RESPONSE(207)              //IMPLICIT OCTET STRING,
		
		// WITH DEDICATED CIPHERING
		, DED_GET_REQUEST(208)                  //IMPLICIT OCTET STRING,
		, DED_SET_REQUEST(209)   				//IMPLICIT OCTET STRING,
		, DED_EVENT_NOTIFICATION_REQUEST(210)   //IMPLICIT OCTET STRING,
		, DED_ACTIONREQUEST(211)  				//IMPLICIT OCTET STRING,
		, DED_GET_RESPONSE(212)  				//IMPLICIT OCTET STRING,
		, DED_SET_RESPONSE(213)   				//IMPLICIT OCTET STRING,
		, DED_ACTION_RESPONSE(215)   			//IMPLICIT OCTET STRING,
		
		// THE EXCEPTION RESPONSE PDU
		, EXCEPTION_RESPONSE(216)   			//IMPLICIT EXCEPTIONRESPONSE,
		
		// ACCESS
		, ACCESS_REQUEST(217)          //IMPLICIT ACCESS_REQUEST,
		, ACCESS_RESPONSE(218)         //IMPLICIT ACCESS_RESPONSE,
		
		// GENERAL APDUS
		, GENERAL_GLO_CIPHERING(219)   //IMPLICIT GENERAL_GLO_CIPHERING,
		, GENERAL_DED_CIPHERING(220)   //IMPLICIT GENERAL_DED_CIPHERING,
		, GENERAL_CIPHERING(221)       //IMPLICIT GENERAL_CIPHERING,
		, GENERAL_SIGNING(223)         //IMPLICIT GENERAL_SIGNING,
		, GENERAL_BLOCK_TRANSFER(224)  //IMPLICIT GENERAL_BLOCK_TRANSFER
		
		// THE TAGS 230 AND 231 ARE RESERVED FOR DLMS GATEWAY
		// RESERVED(230)
		// RESERVED(231)
		, NULL(0)

		, KAIFA_CUSTOM(255);//, UNKNOWN(0x00);
		
		private int code;

		private XDLMS_APDU(int code) {
			this.code = code;
		}

		public byte[] getValue() {
			return new byte[] { DataUtil.getByteToInt(this.code) };
		}
		
		public int getCode() {
			return this.code;
		}

		public static XDLMS_APDU getItem(int code) {
			for (XDLMS_APDU fc : XDLMS_APDU.values()) {
				if (fc.code == code) {
					return fc;
				}
			}
			return null;
		}
		
		public static XDLMS_APDU getItem(byte value){
			for(XDLMS_APDU fc : XDLMS_APDU.values()){
				if(fc.code == DataUtil.getIntToByte(value)){
					return fc;
				}
			}
			return null;
		}
	}
	
}
